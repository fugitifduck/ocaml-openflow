# OASIS_START
# DO NOT EDIT (digest: 5ba2d6e51ae95c48ba98ffffb078a73f)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library openflow
"lib/openflow.cmxs": use_openflow
<lib/*.ml{,i}>: package(packet)
<lib/*.ml{,i}>: package(cstruct)
<lib/*.ml{,i}>: package(str)
<lib/*.ml{,i}>: package(cstruct.syntax)
# Library lwt
"lwt/lwt.cmxs": use_lwt
<lwt/*.ml{,i}>: use_openflow
<lwt/*.ml{,i}>: package(packet)
<lwt/*.ml{,i}>: package(cstruct)
<lwt/*.ml{,i}>: package(lwt)
<lwt/*.ml{,i}>: package(lwt.unix)
<lwt/*.ml{,i}>: package(lwt.syntax)
<lwt/*.ml{,i}>: package(str)
<lwt/*.ml{,i}>: package(cstruct.syntax)
# Library async_openflow
"async/async_openflow.cmxs": use_async_openflow
<async/*.ml{,i}>: use_openflow
<async/*.ml{,i}>: package(packet)
<async/*.ml{,i}>: package(async)
<async/*.ml{,i}>: package(core)
<async/*.ml{,i}>: package(cstruct)
<async/*.ml{,i}>: package(cstruct.async)
<async/*.ml{,i}>: package(threads)
<async/*.ml{,i}>: package(sexplib)
<async/*.ml{,i}>: package(sexplib.syntax)
<async/*.ml{,i}>: package(str)
<async/*.ml{,i}>: package(cstruct.syntax)
# Library quickcheck
"quickcheck/quickcheck.cmxs": use_quickcheck
<quickcheck/*.ml{,i}>: use_openflow
<quickcheck/*.ml{,i}>: package(packet)
<quickcheck/*.ml{,i}>: package(quickcheck)
<quickcheck/*.ml{,i}>: package(cstruct)
<quickcheck/*.ml{,i}>: package(str)
<quickcheck/*.ml{,i}>: package(cstruct.syntax)
# Executable learning_switch
"examples/Learning_Switch.byte": use_async_openflow
"examples/Learning_Switch.byte": use_openflow
"examples/Learning_Switch.byte": package(packet)
"examples/Learning_Switch.byte": package(async)
"examples/Learning_Switch.byte": package(core)
"examples/Learning_Switch.byte": package(cstruct)
"examples/Learning_Switch.byte": package(cstruct.async)
"examples/Learning_Switch.byte": package(threads)
"examples/Learning_Switch.byte": package(sexplib)
"examples/Learning_Switch.byte": package(sexplib.syntax)
"examples/Learning_Switch.byte": package(str)
"examples/Learning_Switch.byte": package(cstruct.syntax)
<examples/*.ml{,i}>: use_async_openflow
<examples/*.ml{,i}>: use_openflow
<examples/*.ml{,i}>: package(packet)
<examples/*.ml{,i}>: package(async)
<examples/*.ml{,i}>: package(core)
<examples/*.ml{,i}>: package(cstruct)
<examples/*.ml{,i}>: package(cstruct.async)
<examples/*.ml{,i}>: package(threads)
<examples/*.ml{,i}>: package(sexplib)
<examples/*.ml{,i}>: package(sexplib.syntax)
<examples/*.ml{,i}>: package(str)
<examples/*.ml{,i}>: package(cstruct.syntax)
# Executable testtool
"test/Test.byte": use_quickcheck
"test/Test.byte": use_openflow
"test/Test.byte": package(packet)
"test/Test.byte": package(oUnit)
"test/Test.byte": package(pa_ounit)
"test/Test.byte": package(pa_ounit.syntax)
"test/Test.byte": package(quickcheck)
"test/Test.byte": package(cstruct)
"test/Test.byte": package(str)
"test/Test.byte": package(cstruct.syntax)
<test/*.ml{,i}>: use_quickcheck
<test/*.ml{,i}>: package(quickcheck)
# Executable test0
"test/Test0.byte": use_lwt
"test/Test0.byte": use_openflow
"test/Test0.byte": package(packet)
"test/Test0.byte": package(oUnit)
"test/Test0.byte": package(pa_ounit)
"test/Test0.byte": package(pa_ounit.syntax)
"test/Test0.byte": package(cstruct)
"test/Test0.byte": package(lwt)
"test/Test0.byte": package(lwt.unix)
"test/Test0.byte": package(lwt.syntax)
"test/Test0.byte": package(str)
"test/Test0.byte": package(cstruct.syntax)
<test/*.ml{,i}>: use_lwt
<test/*.ml{,i}>: use_openflow
<test/*.ml{,i}>: package(packet)
<test/*.ml{,i}>: package(oUnit)
<test/*.ml{,i}>: package(pa_ounit)
<test/*.ml{,i}>: package(pa_ounit.syntax)
<test/*.ml{,i}>: package(cstruct)
<test/*.ml{,i}>: package(lwt)
<test/*.ml{,i}>: package(lwt.unix)
<test/*.ml{,i}>: package(lwt.syntax)
<test/*.ml{,i}>: package(str)
<test/*.ml{,i}>: package(cstruct.syntax)
# OASIS_STOP
<lib/*.ml>: syntax_camlp4o
<lwt/*.ml>: syntax_camlp4o
<test/*.ml>: syntax_camlp4o
<of13test/*.ml>: syntax_camlp4o
<async/*.ml>: syntax_camlp4o
<examples/*.ml>: syntax_camlp4o
