# OASIS_START
# DO NOT EDIT (digest: efca7f87ccba51d09394ec2443274c5a)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library openflow
"lib/openflow.cmxs": use_openflow
<lib/*.ml{,i}>: pkg_packet
<lib/*.ml{,i}>: pkg_cstruct
<lib/*.ml{,i}>: pkg_str
<lib/*.ml{,i}>: pkg_cstruct.syntax
# Library lwt
"lwt/lwt.cmxs": use_lwt
<lwt/*.ml{,i}>: use_openflow
<lwt/*.ml{,i}>: pkg_packet
<lwt/*.ml{,i}>: pkg_cstruct
<lwt/*.ml{,i}>: pkg_lwt
<lwt/*.ml{,i}>: pkg_lwt.unix
<lwt/*.ml{,i}>: pkg_lwt.syntax
<lwt/*.ml{,i}>: pkg_str
<lwt/*.ml{,i}>: pkg_cstruct.syntax
# Library async_openflow
"async/async_openflow.cmxs": use_async_openflow
<async/*.ml{,i}>: use_openflow
<async/*.ml{,i}>: pkg_packet
<async/*.ml{,i}>: pkg_async
<async/*.ml{,i}>: pkg_core
<async/*.ml{,i}>: pkg_cstruct
<async/*.ml{,i}>: pkg_cstruct.async
<async/*.ml{,i}>: pkg_threads
<async/*.ml{,i}>: pkg_sexplib
<async/*.ml{,i}>: pkg_sexplib.syntax
<async/*.ml{,i}>: pkg_str
<async/*.ml{,i}>: pkg_cstruct.syntax
# Library quickcheck
"quickcheck/quickcheck.cmxs": use_quickcheck
<quickcheck/*.ml{,i}>: use_openflow
<quickcheck/*.ml{,i}>: pkg_packet
<quickcheck/*.ml{,i}>: pkg_quickcheck
<quickcheck/*.ml{,i}>: pkg_cstruct
<quickcheck/*.ml{,i}>: pkg_str
<quickcheck/*.ml{,i}>: pkg_cstruct.syntax
# Executable learning_switch
"examples/Learning_Switch.byte": use_async_openflow
"examples/Learning_Switch.byte": use_openflow
"examples/Learning_Switch.byte": pkg_packet
"examples/Learning_Switch.byte": pkg_async
"examples/Learning_Switch.byte": pkg_core
"examples/Learning_Switch.byte": pkg_cstruct
"examples/Learning_Switch.byte": pkg_cstruct.async
"examples/Learning_Switch.byte": pkg_threads
"examples/Learning_Switch.byte": pkg_sexplib
"examples/Learning_Switch.byte": pkg_sexplib.syntax
"examples/Learning_Switch.byte": pkg_str
"examples/Learning_Switch.byte": pkg_cstruct.syntax
<examples/*.ml{,i}>: use_async_openflow
<examples/*.ml{,i}>: use_openflow
<examples/*.ml{,i}>: pkg_packet
<examples/*.ml{,i}>: pkg_async
<examples/*.ml{,i}>: pkg_core
<examples/*.ml{,i}>: pkg_cstruct
<examples/*.ml{,i}>: pkg_cstruct.async
<examples/*.ml{,i}>: pkg_threads
<examples/*.ml{,i}>: pkg_sexplib
<examples/*.ml{,i}>: pkg_sexplib.syntax
<examples/*.ml{,i}>: pkg_str
<examples/*.ml{,i}>: pkg_cstruct.syntax
# Executable testtool
"test/Test.byte": use_quickcheck
"test/Test.byte": use_openflow
"test/Test.byte": pkg_packet
"test/Test.byte": pkg_oUnit
"test/Test.byte": pkg_pa_ounit
"test/Test.byte": pkg_pa_ounit.syntax
"test/Test.byte": pkg_quickcheck
"test/Test.byte": pkg_cstruct
"test/Test.byte": pkg_str
"test/Test.byte": pkg_cstruct.syntax
<test/*.ml{,i}>: use_quickcheck
<test/*.ml{,i}>: pkg_quickcheck
# Executable test0
"test/Test0.byte": use_lwt
"test/Test0.byte": use_openflow
"test/Test0.byte": pkg_packet
"test/Test0.byte": pkg_oUnit
"test/Test0.byte": pkg_pa_ounit
"test/Test0.byte": pkg_pa_ounit.syntax
"test/Test0.byte": pkg_cstruct
"test/Test0.byte": pkg_lwt
"test/Test0.byte": pkg_lwt.unix
"test/Test0.byte": pkg_lwt.syntax
"test/Test0.byte": pkg_str
"test/Test0.byte": pkg_cstruct.syntax
<test/*.ml{,i}>: use_lwt
<test/*.ml{,i}>: use_openflow
<test/*.ml{,i}>: pkg_packet
<test/*.ml{,i}>: pkg_oUnit
<test/*.ml{,i}>: pkg_pa_ounit
<test/*.ml{,i}>: pkg_pa_ounit.syntax
<test/*.ml{,i}>: pkg_cstruct
<test/*.ml{,i}>: pkg_lwt
<test/*.ml{,i}>: pkg_lwt.unix
<test/*.ml{,i}>: pkg_lwt.syntax
<test/*.ml{,i}>: pkg_str
<test/*.ml{,i}>: pkg_cstruct.syntax
# OASIS_STOP
<lib/*.ml>: syntax_camlp4o
<lwt/*.ml>: syntax_camlp4o
<test/*.ml>: syntax_camlp4o
<of13test/*.ml>: syntax_camlp4o
<async/*.ml>: syntax_camlp4o
<examples/*.ml>: syntax_camlp4o
